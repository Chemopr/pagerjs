{"tagline":"The Single Page Application Framework for KnockoutJS","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# pager.js\r\n\r\npager.js provides the possibility of creating single page applications in a declarative fashion.\r\n\r\nThis makes it easier to design large scale single page web sites.\r\n\r\n## Helpers\r\n\r\n* `pager.route`\r\n* `pager.start`\r\n* `pager.extendWithPage`\r\n\r\n### Example\r\n\r\n    pager.extendWithPage(viewModel);\r\n    ko.applyBindings(viewModel);\r\n    pager.start(viewModel);\r\n\r\n\r\n## Custom Bindings\r\n\r\npager.js extends KnockoutJS with two custom bindings: `page` and `page-href`.\r\n\r\n### page\r\n\r\n    <div data-bind=\"page: {}\">\r\n    </div>\r\n\r\nConfigurations:\r\n\r\n* `{String} id` of scoped page that a router should react to. E.g. `start` or `user/me`.\r\n  If the id is `?` (wildcard) it will match anything if no other page in the same parent match.\r\n* `{Object} with` that can change the scope of elements descendants.\r\n* `{String} source` to load into element using jQuery.load\r\n* `{Function} sourceLoaded` is a method to run once the `source` (or `sourceOnShow`) is loaded.\r\n* `{String} sourceOnShow` to load into element using jQuery.load when the element is displayed\r\n* `{Boolean/Number} sourceCache` can be set to true in order for sourceOnShow to only load the source once.\r\n  If a number is specified the cache is valid for that amount of time in seconds.\r\n* `{String}` frame can be set to `iframe` in order for the source to be loaded into an iframe. If the page contains\r\n  an iframe that element is used.\r\n\r\n### page-href\r\n\r\n    <a data-bind=\"page-href: 'somePagePath'\"></a>\r\n\r\nCalculates absolute href based on the location of the element.\r\n\r\n## Dependencies\r\n\r\n- [jQuery](http://jquery.com/)\r\n- [KnockoutJS](http://knockoutjs.com/)\r\n- [Underscore.js](http://underscorejs.org/)\r\n\r\nFor development you'll need\r\n\r\n- [Node.js](http://nodejs.org/)\r\n- [Grunt](https://github.com/cowboy/grunt)\r\n- [QUnit](http://qunitjs.com/)\r\n- [PhantomJS](http://phantomjs.org/)\r\n- [RequireJS](http://requirejs.org/)\r\n\r\n## Behaviors\r\n\r\nThe following behaviors specify and exemplify what `pager.js` is capable of.\r\n\r\n### Should display page with id start by default\r\n\r\n    <div>\r\n      <div data-bind=\"page: {id: 'bar'}\">Bar</div>\r\n      <!-- Foo is displayed -->\r\n      <div data-bind=\"page: {id: 'start'}\">Foo</div>\r\n    </div>\r\n\r\n### Should navigate to page using scoped IDs.\r\n\r\n    <div data-bind=\"page: {id:'start'}\"><a href=\"#foo\">Go to foo</a></div>\r\n    <div data-bind=\"page: {id: 'foo'}\">Foo. Go to <a href=\"#start\">start</a></div>\r\n\r\n### Should be possible to do deep navigation\r\n\r\n    <div id=\"start\" data-bind=\"page: {id: 'start'}\">\r\n        <a href=\"#user/pelle\">Go to Pelle</a>\r\n    </div>\r\n\r\n    <div id=\"user\" data-bind=\"page: {id: 'user'}\">\r\n        <div id=\"pelle\" data-bind=\"page: {id: 'pelle'}\">Pelle</div>\r\n    </div>\r\n\r\n### Should load external content into a page using `source` and trigger `sourceLoaded` event\r\n\r\n    <div data-bind=\"page: {id: 'lorem', source: 'lorem.html .content', sourceLoaded: loremIsLoaded}\"></div>\r\n\r\nThe source can contain a selector (see `.content` above) in order to extract a fragment on the site.\r\nIn the example above `loremIsLoaded` is a function that is triggered after `lorem.html` is loaded.\r\n\r\n### Should lazy load an external content into a page if `sourceOnShow` is declared\r\n\r\n    <div data-bind=\"page: {id: 'lazyLorem', sourceOnShow: 'lorem.html .content'}\"></div>\r\n\r\n`sourceOnShow` tells the page to load the content when the page is displayed.\r\n\r\n### Should cache lazy loaded content when `sourceCache: true`\r\n\r\n    <div data-bind=\"page: {id: 'lazyLoremCached', sourceOnShow: 'lorem.html .content', sourceCache: true}\"></div>\r\n\r\n### Should cache lazy loaded content the number of seconds specified by `sourceCache`\r\n\r\n    <div data-bind=\"page: {id: 'lazyLoremCached5seconds', sourceOnShow: 'lorem.html .content', sourceCache: 5}\"></div>\r\n\r\n`sourceCache` can specify the amount of seconds the external content should be cached.\r\n\r\n### Should specify relative page paths using `page-href`\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n      <!-- This will update href to #start/arne -->\r\n      <a data-bind=\"page-href: 'arne'\">Arne</a>\r\n\r\n      <!-- This will update href to #admin/login -->\r\n      <a data-bind=\"page-href: '../admin/login'\">Admin Login</a>\r\n\r\n      <div data-bind=\"page: {id: 'arne'}\">Arne!</div>\r\n    </div>\r\n    <div data-bind=\"page: {id: 'admin'}\">\r\n      <div data-bind=\"page: {id: 'login'}\">Login</div>\r\n    </div>\r\n\r\nBased on the total path of the page the binding calculates an absolute href.\r\n\r\n### Should change binding context using `with`\r\n\r\n    <div data-bind=\"page: {id: 'user', with: user}\">\r\n      <!-- Here name is user.name -->\r\n      <div data-bind=\"text: name\"></div>\r\n    </div>\r\n\r\n### Should match wildcard IDs if no other ID can match exactly\r\n\r\n    <div data-bind=\"page: {id: 'admin'}\"></div>\r\n    <!-- The page below match anything except 'admin' -->\r\n    <div data-bind=\"page: {id: '?'}\"></div>\r\n\r\n### Should do deep navigation with wildcards\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n          <a href=\"#user/pelle\">Go to Pelle</a>\r\n    </div>\r\n\r\n    <div data-bind=\"page: {id: '?'}\">\r\n        Misc:\r\n        <div data-bind=\"page: {id: 'pelle'}\">\r\n            Pelle\r\n        </div>\r\n    </div>\r\n\r\n### Should send wildcards to source\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n        <a href=\"#user/pelle\">Go to Pelle</a>\r\n    </div>\r\n\r\n    <div data-bind=\"page: {id: 'user'}\">\r\n        User:\r\n        <!-- {1} will be replaced with whatever matched the wildcard -->\r\n        <div data-bind=\"page: {id: '?', sourceOnShow: 'user/{1}.html'}\">\r\n        </div>\r\n    </div>\r\n\r\n### Should be possible to load content into iframes\r\n\r\n    <!-- An iframe will be created inside the div -->\r\n    <div data-bind=\"page: {id: 'user', frame: 'iframe', source: 'user.html'}\"></div>\r\n\r\n    <!-- The iframe specified will be used -->\r\n    <div data-bind=\"page: {id: 'pelle', frame: 'iframe', source: 'pelle.html'}\">\r\n        <iframe sandbox=\"\"></iframe>\r\n    </div>\r\n\r\n### `withOnShow` should lazy bind a new view model to the page\r\n\r\n    <div data-bind=\"page: {id: 'user', withOnShow: someMethod('someMethod')}\"></div>\r\n\r\n`someMethod` must return a function that takes a callback that takes a view model.\r\n\r\nE.g.\r\n\r\n    function requireVM(module) {\r\n      return function(callback) {\r\n        require([module], function(mod) {\r\n          callback(mod.getVM());\r\n        });\r\n      };\r\n    }\r\n\r\n\r\n### Should be possible to route to custom widgets (dialogs, carousels, accordions)\r\n\r\nIt is possible to create custom widgets that jack into the pager-system.\r\nThe `page`-binding (`pager.Page`-class) is possible to extend at multiple points.\r\n\r\nOne custom widget (`page-accordion-item`) is already implemented.\r\n\r\n    <div data-bind=\"page-accordion-item: {id: 'dog'}\">\r\n        <a href=\"#animals/dog\">Dog</a>\r\n\r\n        <div>Dog Information</div>\r\n    </div>\r\n    <div data-bind=\"page-accordion-item: {id: 'cat'}\">\r\n        <a href=\"#animals/cat\">Cat</a>\r\n\r\n        <div>Cat Information</div>\r\n    </div>\r\n\r\n### Should be possible to circumvent the routing\r\n\r\nSince pager is not responsible for listening on the location it is possible to\r\ncircumvent the routing using the router used. Just do not use `pager.start`.\r\n\r\n## In the pipeline\r\n\r\n* Write an extensive example and push it to gh-pages branch.\r\n\r\n## Backlog\r\n\r\nThere are a lot of features waiting to be implemented. Here are some of them.\r\n\r\n### Should be possible to specify page transitions between sub pages\r\n\r\n### Should be possible to specify loaders text on pages\r\n\r\n### Should be possible to run custom JS on \"navigate to\"\r\n\r\n### Should be possible to run custom JS on \"navigate from\"\r\n\r\n### Should be possible to run custom JS on \"navigate failed\"\r\n\r\n### Should be possible to change the page title\r\n\r\n### Should be possible to navigate into a layer without loosing context\r\n\r\n### Should be possible to navigate into a layer and loose context\r\n","name":"Pagerjs","google":""}