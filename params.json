{"name":"Pagerjs","body":"# pager.js\r\n\r\npager.js provides the possibility of creating single page applications in a declarative fashion.\r\n\r\nThis makes it easier to design large scale single page web sites.\r\n\r\nSee the [demo](http://oscar.finnsson.nu/pagerjs/demo/).\r\n\r\n## Getting Started\r\n\r\n* Download the [developer version](https://raw.github.com/finnsson/pagerjs/master/pager.js)\r\n   or the [minified version](https://raw.github.com/finnsson/pagerjs/master/dist/pager.min.js)\r\n   of pager.js\r\n* Include all dependencies (jQuery, Underscore.js, KnockoutJS) as well as pager.js in your site\r\n* Start using the bindings `page`, `page-href`, and `page-accordion-item`. Consult the\r\n  [web page](http://oscar.finnsson.nu/pagerjs/) or\r\n  [test cases](https://github.com/finnsson/pagerjs/tree/master/test) for how to use the bindings.\r\n* Insert the lines `pager.extendWithPage(viewModel); ko.applyBindings(viewModel); pager.start(viewModel);`\r\n* Rock 'n' Roll!\r\n\r\n## Helpers\r\n\r\n* `pager.route`\r\n* `pager.start`\r\n* `pager.extendWithPage`\r\n\r\n### Example\r\n\r\n    // viewModel is your KnockoutJS view model\r\n    var viewModel = {};\r\n    // pager.extendWithPage extends your\r\n    // view model with some pager-specific data\r\n    pager.extendWithPage(viewModel);\r\n    // apply your view model as normal\r\n    ko.applyBindings(viewModel);\r\n    // start the pager. Will listen to hashchange and\r\n    // show/hide pages depending on their page IDs\r\n    pager.start(viewModel);\r\n\r\n\r\n## Custom Bindings\r\n\r\npager.js extends KnockoutJS with three custom bindings: `page`, `page-href` and `page-accordion-item`.\r\n\r\n### page\r\n\r\n    <div data-bind=\"page: {}\">\r\n    </div>\r\n\r\n#### Configurations\r\n\r\n* `{String} id` of scoped page that a router should react to. E.g. `start` or `user/me`.\r\n  If the id is `?` (wildcard) it will match anything if no other page in the same parent match.\r\n* `{Object} with` that can change the scope of elements descendants. The same behavior as the normal `with`-binding.\r\n* `{Function} withOnShow` sets the view model of elements descendants async after the page is shown. This is useful\r\n  so you can extract sub pages view models to other `.js`-files.\r\n* `{String/Function} source` to load into element using `jQuery#load`. The source will be loaded once the page is processed.\r\n  If it is a function it is invoken.\r\n* `{Function} sourceLoaded` is a method/event/callback to run once the `source` (or `sourceOnShow`) is loaded.\r\n* `{String/Function} sourceOnShow` to load into element using `jQuery#load` when the element is displayed. Thus sub pages\r\n  can be extracted and loaded on demand. If it is a function it is invoken.\r\n* `{Boolean/Number} sourceCache` can be set to true in order for sourceOnShow to only load the source once.\r\n  If a number is specified the cache is valid for that amount of time in seconds.\r\n* `{String} frame` can be set to `iframe` in order for the source to be loaded into an iframe. If the page contains\r\n  an iframe that element is used.\r\n* `{Boolean} modal` can be set to `true` in order for the page to act as a modal. If a page is a modal it can be\r\n  found by child-pages to sibling-pages of the modal.\r\n* `{Function} beforeHide` is called before the page is hidden.\r\n* `{Function} beforeShow` is called before the page is shown.\r\n* `{Function} afterHide` is called after the page is hidden.\r\n* `{Function} afterShow` is called after the page is shown.\r\n* `{Function} hideElement` can be supplied as a custom hide-method instead of the default `$(element).hide()`;\r\n* `{Function} showElement` can be supplied as a custom show-method instead of the default `$(element).show()`;\r\n* `{Function} loader` to call once the page is loaded. Can e.g. create a spinner inside the element.\r\n* `{Function} navigationFailed` method to call if a navigation could not find any matching page.\r\n* `{Object} params` binds URL-parameters to local observables.\r\n* `{Function} guard` validates a page transition before it is happening.\r\n\r\n\r\n### page-href\r\n\r\n    <a data-bind=\"page-href: 'somePagePath'\"></a>\r\n\r\nCalculates absolute href based on the location of the element.\r\n\r\n### page-accordion-item\r\n\r\n    <!-- First item in accordion -->\r\n    <div data-bind=\"page-accordion-item: {id: 'dog'}\">\r\n        <a href=\"#animals/dog\">Dog</a>\r\n        <div>Dog Information</div>\r\n    </div>\r\n    <!-- Second item in accordion -->\r\n    <div data-bind=\"page-accordion-item: {id: 'cat'}\">\r\n        <a href=\"#animals/cat\">Cat</a>\r\n        <div>Cat Information</div>\r\n    </div>\r\n\r\n`page-accordion-item` is a subclass / subbinding of `page` enabling deep linking and navigation of accordions.\r\n\r\n\r\n## Dependencies\r\n\r\n- [KnockoutJS](http://knockoutjs.com/)\r\n- [jQuery](http://jquery.com/)\r\n- [Underscore.js](http://underscorejs.org/)\r\n\r\nFor developing pager.js you'll need\r\n\r\n- [Node.js](http://nodejs.org/)\r\n- [Grunt](https://github.com/cowboy/grunt)\r\n- [QUnit](http://qunitjs.com/)\r\n- [PhantomJS](http://phantomjs.org/)\r\n- [RequireJS](http://requirejs.org/)\r\n\r\n## Behaviors\r\n\r\nThe following behaviors specify and exemplify what pager.js is capable of.\r\n\r\n### Should display page with id start by default\r\n\r\n    <div>\r\n      <div data-bind=\"page: {id: 'bar'}\">Bar</div>\r\n      <!-- Foo is displayed -->\r\n      <div data-bind=\"page: {id: 'start'}\">Foo</div>\r\n    </div>\r\n\r\n### Should navigate to page using scoped IDs.\r\n\r\n    <div data-bind=\"page: {id:'start'}\">\r\n      <a href=\"#foo\">Go to foo</a>\r\n    </div>\r\n    <div data-bind=\"page: {id: 'foo'}\">\r\n      Foo. Go to <a href=\"#start\">start</a>\r\n    </div>\r\n\r\n### Should be possible to do deep navigation\r\n\r\n    <div id=\"start\" data-bind=\"page: {id: 'start'}\">\r\n        <a href=\"#user/fry\">Go to Fry</a>\r\n    </div>\r\n\r\n    <div id=\"user\" data-bind=\"page: {id: 'user'}\">\r\n        <div id=\"fry\" data-bind=\"page: {id: 'fry'}\">Fry</div>\r\n    </div>\r\n\r\n### Should load external content into a page using `source` and trigger `sourceLoaded` event\r\n\r\n    <div data-bind=\"page: {id: 'lorem', source: 'lorem.html .content', sourceLoaded: loremIsLoaded}\"></div>\r\n\r\nThe source can contain a selector (see `.content` above) in order to extract a fragment on the site.\r\nIn the example above `loremIsLoaded` is a function that is triggered after `lorem.html` is loaded.\r\n\r\n### Should lazy load an external content into a page if `sourceOnShow` is declared\r\n\r\n    <div data-bind=\"page: {id: 'lazyLorem', sourceOnShow: 'lorem.html .content'}\"></div>\r\n\r\n`sourceOnShow` tells the page to load the content when the page is displayed.\r\n\r\n### Should cache lazy loaded content when `sourceCache: true`\r\n\r\n    <div data-bind=\"page: {id: 'lazyLoremCached', sourceOnShow: 'lorem.html .content', sourceCache: true}\"></div>\r\n\r\n### Should cache lazy loaded content the number of seconds specified by `sourceCache`\r\n\r\n    <div data-bind=\"page: {id: 'lazyLoremCached5seconds', sourceOnShow: 'lorem.html .content', sourceCache: 5}\"></div>\r\n\r\n`sourceCache` can specify the amount of seconds the external content should be cached.\r\n\r\n### Should specify relative page paths using `page-href`\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n      <!-- This will update href to #start/bender -->\r\n      <a data-bind=\"page-href: 'bender'\">Bender</a>\r\n\r\n      <!-- This will update href to #admin/login -->\r\n      <a data-bind=\"page-href: '../admin/login'\">Admin Login</a>\r\n\r\n      <div data-bind=\"page: {id: 'bender'}\">Bender!</div>\r\n    </div>\r\n    <div data-bind=\"page: {id: 'admin'}\">\r\n      <div data-bind=\"page: {id: 'login'}\">Login</div>\r\n    </div>\r\n\r\nBased on the total path of the page the binding calculates an absolute href.\r\n\r\n### Should change binding context using `with`\r\n\r\n    <div data-bind=\"page: {id: 'user', with: user}\">\r\n      <!-- Here name is user.name -->\r\n      <div data-bind=\"text: name\"></div>\r\n    </div>\r\n\r\n### `withOnShow` should lazy bind a new view model to the page\r\n\r\n    <div data-bind=\"page: {id: 'user', withOnShow: someMethod('someMethod')}\"></div>\r\n\r\n`someMethod` must return a function that takes a callback that takes a view model.\r\n\r\nE.g.\r\n\r\n    function requireVM(module) {\r\n      return function(callback) {\r\n        require([module], function(mod) {\r\n          callback(mod.getVM());\r\n        });\r\n      };\r\n    }\r\n\r\n### Should match wildcard IDs if no other ID can match exactly\r\n\r\n    <div data-bind=\"page: {id: 'admin'}\"></div>\r\n    <!-- The page below match anything except 'admin' -->\r\n    <div data-bind=\"page: {id: '?'}\"></div>\r\n\r\n### Should do deep navigation with wildcards\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n          <a href=\"#user/leela\">Go to Leela</a>\r\n    </div>\r\n\r\n    <div data-bind=\"page: {id: '?'}\">\r\n        Misc:\r\n        <div data-bind=\"page: {id: 'leela'}\">\r\n            Leela\r\n        </div>\r\n    </div>\r\n\r\n### Should send wildcards to source\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n        <a href=\"#user/fry\">Go to Fry</a>\r\n    </div>\r\n\r\n    <div data-bind=\"page: {id: 'user'}\">\r\n        User:\r\n        <!-- {1} will be replaced with whatever matched the wildcard -->\r\n        <div data-bind=\"page: {id: '?', sourceOnShow: 'user/{1}.html'}\">\r\n        </div>\r\n    </div>\r\n\r\n### Should be possible to load content into iframes\r\n\r\n    <!-- An iframe will be created inside the div -->\r\n    <div data-bind=\"page: {id: 'user', frame: 'iframe', source: 'user.html'}\"></div>\r\n\r\n    <!-- The iframe specified will be used -->\r\n    <div data-bind=\"page: {id: 'fry', frame: 'iframe', source: 'fry.html'}\">\r\n        <iframe sandbox=\"\"></iframe>\r\n    </div>\r\n\r\n### Should be possible to route to custom widgets (dialogs, carousels, accordions)\r\n\r\nIt is possible to create custom widgets that jack into the pager-system.\r\nThe `page`-binding (`pager.Page`-class) is possible to extend at multiple points.\r\n\r\nOne custom widget (`page-accordion-item`) is already implemented.\r\n\r\n    <div data-bind=\"page: {id: 'employee'}\">\r\n        <div data-bind=\"page-accordion-item: {id: 'zoidberg'}\">\r\n            <a href=\"#employee/zoidberg\">Dog</a>\r\n            <div>Zoidberg Information</div>\r\n        </div>\r\n        <div data-bind=\"page-accordion-item: {id: 'hermes'}\">\r\n            <a href=\"#employee/hermes\">Cat</a>\r\n            <div>Hermes Information</div>\r\n        </div>\r\n    </div>\r\n\r\n### Should be possible to circumvent the routing\r\n\r\nSince pager is not responsible for listening on the location it is possible to\r\ncircumvent the routing using the router used. Just do not use `pager.start`.\r\n\r\n### Should be possible to navigate into a layer (modal dialog) without losing context\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n      <div data-bind=\"page: {id: 'admin'}>\r\n        <a href=\"#start/admin/ok\">Show OK</a>\r\n      </div>\r\n      <div data-bind=\"page: {id: 'ok', modal: true, title: 'OK?'}\">\r\n            <a href=\"#admin\">OK?</a>\r\n      </div>\r\n    </div>\r\n\r\nIf a `page` is set to `modal` is can match IDs deeper down the hierarchy. In this case\r\nstart/ok also matches start/admin/ok making the page available as a modal dialog\r\nin other contexts.\r\n\r\n### Should be possible to navigate into a layer (modal dialog) and lose context\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n      <div data-bind=\"page: {id: 'admin'}>\r\n        <a href=\"#start/ok\">Show OK</a>\r\n      </div>\r\n      <div data-bind=\"page: {id: 'ok', modal: true}\">\r\n            <a href=\"#admin\">OK?</a>\r\n      </div>\r\n    </div>\r\n\r\nLosing the context is nothing special. Just navigate away form the current page.\r\n\r\n### Should be possible to change the page title\r\n\r\n    <div data-bind=\"page: {id: 'fry', title: 'Fry'}\">\r\n      Fry\r\n    </div>\r\n\r\nSetting the 'title' configuration property will update the document title when navigating to\r\nthe page.\r\n\r\n\r\n### Should be possible to run custom JS on \"before/after navigate from/to\"\r\n\r\nThere are four alternatives:\r\n\r\n* global registration using pager.childManager\r\n* global data binding on body using `click`\r\n* local data binding on anchor using `click`\r\n* local data binding on page using `beforeHide`, `afterHide`, `beforeShow`, and `afterShow`\r\n\r\n\r\n    // global registration using pager.childManager\r\n    ko.computed(function() {\r\n      var currentChild = pager.childManager.currentChildO();\r\n      if(currentChild) {\r\n        // do something\r\n      }\r\n    });\r\n\r\n    <body data-bind=\"click: globalClick\">\r\n\r\n        // local data binding on page\r\n        <div data-bind=\"page: {id: 'fry', beforeHide: beforeFryIsHidden}\"></div>\r\n\r\n        // local data binding on anchor using click\r\n        <a data-bind=\"page-href: 'fry' click: anchorClicked}\">Go to Fry</a>\r\n\r\n    </body>\r\n\r\n    var beforeFryIsHidden = function(page) {\r\n        console.error(page);\r\n    };\r\n\r\n    var anchorClicked = function(page, e) {\r\n        // otherwise the event will be stopped\r\n        return true;\r\n    };\r\n\r\n    var globalClick = function() {\r\n        // otherwise the event will be stopped\r\n        return true;\r\n    };\r\n\r\nThe click data-binding can be used to run validations before navigations. Just do not `return true`\r\nto prevent the navigation from happening.\r\n\r\n\r\n### Should be possible to supply custom showElement and hideElement-methods\r\n\r\n    <div data-bind=\"page: {id: 'fry', showElement: showFry, hideElement: hideFry}\">\r\n      Fry\r\n    </div>\r\n\r\n    // new default hide\r\n    pager.hideElement = function(page, callback) {\r\n      $(page.element).slideUp(600);\r\n      if(callback) {\r\n        callback();\r\n      }\r\n    };\r\n\r\n    // new default show\r\n    pager.showElement = function(page, callback) {\r\n      $(page.element).slideDown(600);\r\n      if(callback) {\r\n        callback();\r\n      }\r\n    };\r\n\r\n    var showFry = function(page, callback) {\r\n      $(page.element).fadeIn(500, callback);\r\n    };\r\n    var hideFry = function(page, callback) {\r\n      $(page.element).fadeOut(500, callback);\r\n    };\r\n\r\n### Should be possible to specify loaders in pages\r\n\r\n    <div data-bind=\"page: {id: 'zoidberg', title: 'Zoidberg', loader: loader, sourceOnShow: 'zoidberg.html'}\" />\r\n\r\nwhere\r\n\r\n    textLoader: function(page, element) {\r\n        var loader = {};\r\n        var txt = $('<div></div>', {text: 'Loading ' + page.getValue().title});\r\n        loader.load = function() {\r\n            $(element).append(txt);\r\n        };\r\n        loader.unload = function() {\r\n            txt.remove();\r\n        };\r\n        return loader;\r\n    }\r\n\r\n### Should be possible to specify global loaders\r\n\r\n    // see textLoader above\r\n    pager.loader = textLoader;\r\n\r\n### Documented source code\r\n\r\nThe source code is documented using JsDoc.\r\n\r\n### Tab panel custom widget\r\n\r\n    <ul class=\"nav nav-tabs\" data-bind=\"foreach: $page.children\">\r\n        <li data-bind=\"css: {active: isVisible}\"><a data-bind=\"text: $data.getValue().title, page-href: getId()\"></a></li>\r\n    </ul>\r\n\r\n    <div data-bind=\"page: {id: 'Slagsmålsklubben', title: 'Slagsmålsklubben', sourceOnShow: 'https://embed.spotify.com/?uri=spotify:album:66KBDVJnA6c0DjHeSZYaHb', frame: 'iframe'}\" class=\"hero-unit\">\r\n        <iframe width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\"></iframe>\r\n    </div>\r\n\r\n    <div data-bind=\"page: {id: 'Binärpilot', title: 'Binärpilot', sourceOnShow: 'https://embed.spotify.com/?uri=spotify:album:67LKycg4jAoC06kZgjvbNd', frame: 'iframe'}\" class=\"hero-unit\">\r\n        <iframe width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\"></iframe>\r\n    </div>\r\n\r\n\r\n### Should be possible to react to a failed navigation\r\n\r\nBoth Page-objects and pager should send events whenever a navigation failed (i.e. no matching page for the route).\r\n\r\n    <a data-bind=\"click: function() { window.location.hash = 'failed_navigation/random/' + (Math.random()*1000).toFixed() }\">\r\n        Go to random sub-page\r\n    </a>\r\n\r\n    <div data-bind=\"page: {id: 'random', navigationFailed: randomFailed}\">\r\n        <ul class=\"nav nav-tabs\" data-bind=\"foreach: $page.children\">\r\n            <li data-bind=\"css: {active: isVisible}\"><a\r\n                    data-bind=\"text: getId(), page-href: getId()\"></a></li>\r\n        </ul>\r\n\r\n        <div data-bind=\"foreach: newChildren\">\r\n            <div data-bind=\"page: {id: childId}\">\r\n                <span data-bind=\"text: childId\"></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\nwhere\r\n\r\n    randomFailed:function (page, route) {\r\n        viewModel.newChildren.push({\r\n            childId:route[0]\r\n        });\r\n        page.showPage(route);\r\n    },\r\n    newChildren:ko.observableArray([])\r\n\r\n\r\n### Should be possible to load view content using a custom method\r\n\r\nIn order to facilitate programming in the large it is useful to be able to extract views as separate components.\r\nThese views should not be forced to be stored as html-fragments or be loaded with jQuery.\r\n\r\nThus a way to inject custom views should be possible. This is done using the `source`- or\r\n`sourceOnShow`-properties. Just supply a method instead of a string!\r\n\r\nThese properties takes a method that should take a `pager.Page` as first argument, a callback, and return nothing.\r\n\r\n    <div data-bind=\"page: {id: 'zoidberg', sourceOnShow: requireView('character/zoidberg')}\" />\r\n\r\nwhere\r\n\r\n    window.requireView = function(viewModule) {\r\n      return function(page, callback) {\r\n        require([viewModule], function(viewString) {\r\n          $(page.element).html(viewString);\r\n          callback();\r\n        });\r\n      };\r\n    };\r\n\r\nif\r\n\r\n    // file: character/zoidberg.js\r\n    define(function() {\r\n      return '<h1>Zoidberg</h1>';\r\n    });\r\n\r\n\r\n### Should be possible to send URI (fragment identifier) parameters to a page\r\n\r\nA page should be able to access the information in the current route - changing a view-model.\r\n\r\nSending parts of the fragment identifier to variables in the view-model is possible using\r\n`params`.\r\n\r\n    <div data-bind=\"page: {id: 'search', params: {'name', 'fromdate'}}\">\r\n      <span data-bind=\"text: name\"></span> (<span data-bind=\"text: fromdate\"></span>)\r\n    </div>\r\n\r\nwhere `name` and `fromdate` with be bound by the parameters `name` and `fromdate`.\r\n\r\nAn example route for the example above could look like\r\n\r\n    example.com/#search/tv?name=samsung&fromdate=20121010\r\n\r\nor if HTML5 history is used\r\n\r\n    example.com/search/tv?name=samsung&fromdate=20121010\r\n\r\n### Should be possible to add guards\r\n\r\nGuards are methods that are run before the page navigation takes place and\r\nthat can stop the navigation from displaying a certain page.\r\n\r\nUse the property `guard: someMethod` do apply the guard. The method\r\ntakes three parameters: page, route and callback. If the callback is called\r\nthe navigation takes place - otherwise it is stopped.\r\n\r\n    <div data-bind=\"page: {id: 'admin', guard: isLoggedIn}\">\r\n      This page is only accessible if the user is logged in.\r\n    </div>\r\n\r\nwhere\r\n\r\n    isLoggedIn: function(page, route, callback) {\r\n        if(viewModel.loggedIn()) {\r\n            callback();\r\n        } else {\r\n            window.location.href = \"login\";\r\n        }\r\n    }\r\n\r\nUse cases are login, validating steps in state machines, etc.\r\n\r\nThe reason the guard takes a callback as third argument is simply because the guard might be async - accessing\r\na webserver for login details or asking if a valid shopping card exists etc.\r\n\r\n## In the pipeline\r\n\r\nNothing is in the pipeline at the moment. I have to use pager.js some more.\r\n\r\n## Backlog\r\n\r\nThere are a lot of features waiting to be implemented. Here are some of them.\r\n\r\n### Document architecture and guiding principles\r\n\r\nThe architecture - and guiding principles - should be documentet.\r\n\r\n* Dependencies (jQuery, KnockoutJS, Underscore.js)\r\n* how the tool-chain is used (grunt qunit > grunt min),\r\n* working process (README.md > GitHub Issues > QUnit-test > pager.js > demo-page),\r\n* code architecture (pager , Page, ChildManager).\r\n* Document navigation/callback/event-order.\r\n* Update doc.\r\n* Update with History.js-example\r\n\r\n\r\n### Wildcards should deep-load content if configured so\r\n\r\n    <a href=\"some/other/url\">Go to some/other/url.html</a>\r\n\r\n    <div data-bind=\"page: {id: '?', deep: true, sourceOnShow: '{?}.html'}>\r\n    </div>\r\n\r\n### Scoped pure view observables using `vars`\r\n\r\n    <!-- x and y are now available as observables, but only in the view (not the view-model) -->\r\n    <div data-bind=\"page: {id: 'foo', vars: ['x','y']}\">\r\n      <span data-bind=\"text: x\"></span>\r\n      <span data-bind=\"text: x\"></span>\r\n    </div>\r\n\r\nThis is useful for effects that has nothing to do with the view-model.\r\n\r\n### Named binding of child elements using `bind-child`\r\n\r\n    <div data-bind=\"page: {id: 'foo'}\">\r\n      <div>\r\n        <span data-bind=\"page-child: 'name'\"/>\r\n        <span data-bind=\"page-child: 'age'\"/>\r\n      </div>\r\n    </div>\r\n\r\nNow `name` and `age` are available in the `Page`-instance\r\nunder the `elementChildren`-observable, e.g. `this.elementChildren().name()`\r\nand `this.elementChildren().age()`.","tagline":"The Single Page Application Framework for KnockoutJS","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}