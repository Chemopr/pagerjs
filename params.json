{"name":"Pagerjs","tagline":"The Single Page Application Framework for KnockoutJS","body":"# pager.js\r\n\r\npager.js provides the possibility of creating single page applications in a declarative fashion.\r\n\r\nThis makes it easier to design large scale single page web sites.\r\n\r\nSee the [demo](demo/).\r\n\r\n## Getting Started\r\n\r\n* Download the [developer version](https://raw.github.com/finnsson/pagerjs/master/pager.js)\r\n   or the [minified version](https://raw.github.com/finnsson/pagerjs/master/dist/pager.min.js)\r\n   of pager.js\r\n* Include all dependencies (jQuery, Underscore.js, KnockoutJS) as well as pager.js in your site\r\n* Start using the bindings `page`, `page-href`, and `page-accordion-item`. Consult the\r\n  [web page](http://oscar.finnsson.nu/pagerjs/) or\r\n  [test cases](https://github.com/finnsson/pagerjs/tree/master/test) for how to use the bindings.\r\n* Insert the lines `pager.extendWithPage(viewModel); ko.applyBindings(viewModel); pager.start(viewModel);`\r\n* Rock 'n' Roll!\r\n\r\n## Helpers\r\n\r\n* `pager.route`\r\n* `pager.start`\r\n* `pager.extendWithPage`\r\n\r\n### Example\r\n\r\n    // viewModel is your KnockoutJS view model\r\n    var viewModel = {};\r\n    // pager.extendWithPage extends your\r\n    // view model with some pager-specific data\r\n    pager.extendWithPage(viewModel);\r\n    // apply your view model as normal\r\n    ko.applyBindings(viewModel);\r\n    // start the pager. Will listen to hashchange and\r\n    // show/hide pages depending on their page IDs\r\n    pager.start(viewModel);\r\n\r\n\r\n## Custom Bindings\r\n\r\npager.js extends KnockoutJS with three custom bindings: `page`, `page-href` and `page-accordion-item`.\r\n\r\n### page\r\n\r\n    <div data-bind=\"page: {}\">\r\n    </div>\r\n\r\n#### Configurations\r\n\r\n* `{String} id` of scoped page that a router should react to. E.g. `start` or `user/me`.\r\n  If the id is `?` (wildcard) it will match anything if no other page in the same parent match.\r\n* `{Object} with` that can change the scope of elements descendants. The same behavior as the normal `with`-binding.\r\n* `{Function} withOnShow` sets the view model of elements descendants async after the page is shown. This is useful\r\n  so you can extract sub pages view models to other `.js`-files.\r\n* `{String} source` to load into element using `jQuery#load`. The source will be loaded once the page is processed.\r\n* `{Function} sourceLoaded` is a method/event/callback to run once the `source` (or `sourceOnShow`) is loaded.\r\n* `{String} sourceOnShow` to load into element using `jQuery#load` when the element is displayed. Thus sub pages\r\n  can be extracted and loaded on demand.\r\n* `{Boolean/Number} sourceCache` can be set to true in order for sourceOnShow to only load the source once.\r\n  If a number is specified the cache is valid for that amount of time in seconds.\r\n* `{String} frame` can be set to `iframe` in order for the source to be loaded into an iframe. If the page contains\r\n  an iframe that element is used.\r\n\r\n### page-href\r\n\r\n    <a data-bind=\"page-href: 'somePagePath'\"></a>\r\n\r\nCalculates absolute href based on the location of the element.\r\n\r\n### page-accordion-item\r\n\r\n    <!-- First item in accordion -->\r\n    <div data-bind=\"page-accordion-item: {id: 'dog'}\">\r\n        <a href=\"#animals/dog\">Dog</a>\r\n        <div>Dog Information</div>\r\n    </div>\r\n    <!-- Second item in accordion -->\r\n    <div data-bind=\"page-accordion-item: {id: 'cat'}\">\r\n        <a href=\"#animals/cat\">Cat</a>\r\n        <div>Cat Information</div>\r\n    </div>\r\n\r\n`page-accordion-item` is a subclass / subbinding of `page` enabling deep linking and navigation of accordions.\r\n\r\n\r\n## Dependencies\r\n\r\n- [KnockoutJS](http://knockoutjs.com/)\r\n- [jQuery](http://jquery.com/)\r\n- [Underscore.js](http://underscorejs.org/)\r\n\r\nFor developing pager.js you'll need\r\n\r\n- [Node.js](http://nodejs.org/)\r\n- [Grunt](https://github.com/cowboy/grunt)\r\n- [QUnit](http://qunitjs.com/)\r\n- [PhantomJS](http://phantomjs.org/)\r\n- [RequireJS](http://requirejs.org/)\r\n\r\n## Behaviors\r\n\r\nThe following behaviors specify and exemplify what pager.js is capable of.\r\n\r\n### Should display page with id start by default\r\n\r\n    <div>\r\n      <div data-bind=\"page: {id: 'bar'}\">Bar</div>\r\n      <!-- Foo is displayed -->\r\n      <div data-bind=\"page: {id: 'start'}\">Foo</div>\r\n    </div>\r\n\r\n### Should navigate to page using scoped IDs.\r\n\r\n    <div data-bind=\"page: {id:'start'}\">\r\n      <a href=\"#foo\">Go to foo</a>\r\n    </div>\r\n    <div data-bind=\"page: {id: 'foo'}\">\r\n      Foo. Go to <a href=\"#start\">start</a>\r\n    </div>\r\n\r\n### Should be possible to do deep navigation\r\n\r\n    <div id=\"start\" data-bind=\"page: {id: 'start'}\">\r\n        <a href=\"#user/fry\">Go to Fry</a>\r\n    </div>\r\n\r\n    <div id=\"user\" data-bind=\"page: {id: 'user'}\">\r\n        <div id=\"fry\" data-bind=\"page: {id: 'fry'}\">Fry</div>\r\n    </div>\r\n\r\n### Should load external content into a page using `source` and trigger `sourceLoaded` event\r\n\r\n    <div data-bind=\"page: {id: 'lorem', source: 'lorem.html .content', sourceLoaded: loremIsLoaded}\"></div>\r\n\r\nThe source can contain a selector (see `.content` above) in order to extract a fragment on the site.\r\nIn the example above `loremIsLoaded` is a function that is triggered after `lorem.html` is loaded.\r\n\r\n### Should lazy load an external content into a page if `sourceOnShow` is declared\r\n\r\n    <div data-bind=\"page: {id: 'lazyLorem', sourceOnShow: 'lorem.html .content'}\"></div>\r\n\r\n`sourceOnShow` tells the page to load the content when the page is displayed.\r\n\r\n### Should cache lazy loaded content when `sourceCache: true`\r\n\r\n    <div data-bind=\"page: {id: 'lazyLoremCached', sourceOnShow: 'lorem.html .content', sourceCache: true}\"></div>\r\n\r\n### Should cache lazy loaded content the number of seconds specified by `sourceCache`\r\n\r\n    <div data-bind=\"page: {id: 'lazyLoremCached5seconds', sourceOnShow: 'lorem.html .content', sourceCache: 5}\"></div>\r\n\r\n`sourceCache` can specify the amount of seconds the external content should be cached.\r\n\r\n### Should specify relative page paths using `page-href`\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n      <!-- This will update href to #start/bender -->\r\n      <a data-bind=\"page-href: 'bender'\">Bender</a>\r\n\r\n      <!-- This will update href to #admin/login -->\r\n      <a data-bind=\"page-href: '../admin/login'\">Admin Login</a>\r\n\r\n      <div data-bind=\"page: {id: 'bender'}\">Bender!</div>\r\n    </div>\r\n    <div data-bind=\"page: {id: 'admin'}\">\r\n      <div data-bind=\"page: {id: 'login'}\">Login</div>\r\n    </div>\r\n\r\nBased on the total path of the page the binding calculates an absolute href.\r\n\r\n### Should change binding context using `with`\r\n\r\n    <div data-bind=\"page: {id: 'user', with: user}\">\r\n      <!-- Here name is user.name -->\r\n      <div data-bind=\"text: name\"></div>\r\n    </div>\r\n\r\n### Should match wildcard IDs if no other ID can match exactly\r\n\r\n    <div data-bind=\"page: {id: 'admin'}\"></div>\r\n    <!-- The page below match anything except 'admin' -->\r\n    <div data-bind=\"page: {id: '?'}\"></div>\r\n\r\n### Should do deep navigation with wildcards\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n          <a href=\"#user/leela\">Go to Leela</a>\r\n    </div>\r\n\r\n    <div data-bind=\"page: {id: '?'}\">\r\n        Misc:\r\n        <div data-bind=\"page: {id: 'leela'}\">\r\n            Leela\r\n        </div>\r\n    </div>\r\n\r\n### Should send wildcards to source\r\n\r\n    <div data-bind=\"page: {id: 'start'}\">\r\n        <a href=\"#user/fry\">Go to Fry</a>\r\n    </div>\r\n\r\n    <div data-bind=\"page: {id: 'user'}\">\r\n        User:\r\n        <!-- {1} will be replaced with whatever matched the wildcard -->\r\n        <div data-bind=\"page: {id: '?', sourceOnShow: 'user/{1}.html'}\">\r\n        </div>\r\n    </div>\r\n\r\n### Should be possible to load content into iframes\r\n\r\n    <!-- An iframe will be created inside the div -->\r\n    <div data-bind=\"page: {id: 'user', frame: 'iframe', source: 'user.html'}\"></div>\r\n\r\n    <!-- The iframe specified will be used -->\r\n    <div data-bind=\"page: {id: 'fry', frame: 'iframe', source: 'fry.html'}\">\r\n        <iframe sandbox=\"\"></iframe>\r\n    </div>\r\n\r\n### `withOnShow` should lazy bind a new view model to the page\r\n\r\n    <div data-bind=\"page: {id: 'user', withOnShow: someMethod('someMethod')}\"></div>\r\n\r\n`someMethod` must return a function that takes a callback that takes a view model.\r\n\r\nE.g.\r\n\r\n    function requireVM(module) {\r\n      return function(callback) {\r\n        require([module], function(mod) {\r\n          callback(mod.getVM());\r\n        });\r\n      };\r\n    }\r\n\r\n\r\n### Should be possible to route to custom widgets (dialogs, carousels, accordions)\r\n\r\nIt is possible to create custom widgets that jack into the pager-system.\r\nThe `page`-binding (`pager.Page`-class) is possible to extend at multiple points.\r\n\r\nOne custom widget (`page-accordion-item`) is already implemented.\r\n\r\n    <div data-bind=\"page: {id: 'employee'}\">\r\n        <div data-bind=\"page-accordion-item: {id: 'zoidberg'}\">\r\n            <a href=\"#employee/zoidberg\">Dog</a>\r\n            <div>Zoidberg Information</div>\r\n        </div>\r\n        <div data-bind=\"page-accordion-item: {id: 'hermes'}\">\r\n            <a href=\"#employee/hermes\">Cat</a>\r\n            <div>Hermes Information</div>\r\n        </div>\r\n    </div>\r\n\r\n### Should be possible to circumvent the routing\r\n\r\nSince pager is not responsible for listening on the location it is possible to\r\ncircumvent the routing using the router used. Just do not use `pager.start`.\r\n\r\n## In the pipeline\r\n\r\n* Write an extensive example and push it to gh-pages branch.\r\n\r\n## Backlog\r\n\r\nThere are a lot of features waiting to be implemented. Here are some of them.\r\n\r\n### Custom Widgets\r\n\r\n#### Tab Panel\r\n\r\n#### Panel\r\n\r\n### Should be possible to specify page transitions between sub pages\r\n\r\n### Should be possible to specify loaders text on pages\r\n\r\n### Should be possible to run custom JS on \"navigate to\"\r\n\r\n### Should be possible to run custom JS on \"navigate from\"\r\n\r\n### Should be possible to run custom JS on \"navigate failed\"\r\n\r\n### Should be possible to change the page title\r\n\r\n### Should be possible to navigate into a layer without loosing context\r\n\r\n### Should be possible to navigate into a layer and loose context\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}